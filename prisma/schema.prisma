// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  GOOGLE
  MICROSOFT
  EMAIL
}

enum SecretType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  emailVerified DateTime?
  name          String?
  avatar        String?
  authProvider  AuthProvider
  providerId    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  workspaces    Workspace[]
  userSecrets   UserSecret[]

  @@map("users")
}

model UserSecret {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      SecretType
  secret    String
  expiresAt DateTime
  createdAt DateTime   @default(now())

  @@unique([userId, type])
  @@map("user_secrets")
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pages     Page[]

  @@map("workspaces")
}

model Page {
  id          String    @id @default(cuid())
  name        String
  slug        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, slug])
  @@map("pages")
}
